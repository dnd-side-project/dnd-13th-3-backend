name: CI/CD Pipeline for Spring Boot on EC2

on:
  push:
    branches: [ develop ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build Spring Boot application
        run: |
          ./gradlew clean assemble --no-daemon

      - name: Docker Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/dnd-13th-3-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/dnd-13th-3-backend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            APP_DIR="/home/ec2-user/dnd-13th-3-backend"
            cd "$APP_DIR"

            # 도커 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # cat과 EOF를 사용해 .env 파일을 안전하게 생성
            cat <<'EOF' > .env
            DB_URL="jdbc:mysql://db:3306/minu?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true"
            DB_USERNAME="${{ secrets.DB_USERNAME }}"
            DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            DB_NAME="minu"
            DB_ROOT_PASSWORD="${{ secrets.DB_ROOT_PASSWORD }}"
            GOOGLE_CLIENT_ID="${{ secrets.GOOGLE_CLIENT_ID }}"
            GOOGLE_CLIENT_SECRET="${{ secrets.GOOGLE_CLIENT_SECRET }}"
            JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
            EOF
            
            # docker-compose를 사용해 애플리케이션을 실행
            docker-compose pull
            docker-compose up -d --force-recreate --remove-orphans

            # 사용하지 않는 도커 이미지 정리
            docker image prune -af