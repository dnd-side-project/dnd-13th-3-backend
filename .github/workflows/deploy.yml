name: CI/CD Pipeline for Spring Boot on EC2

on:
  push:
    branches: [ develop ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Build Spring Boot application
        run: |
          ./gradlew clean assemble --no-daemon --info \
            -Djwt.secret="${{ secrets.JWT_SECRET_KEY }}" \
            -Dspring.datasource.url="${{ secrets.DB_URL }}" \
            -Dspring.datasource.username="${{ secrets.DB_USERNAME }}" \
            -Dspring.datasource.password="${{ secrets.DB_PASSWORD }}" \
            -Dspring.security.oauth2.client.registration.google.client-id="${{ secrets.GOOGLE_CLIENT_ID }}" \
            -Dspring.security.oauth2.client.registration.google.client-secret="${{ secrets.GOOGLE_CLIENT_SECRET }}"

      - name: Docker Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/dnd-13th-3-backend:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/dnd-13th-3-backend:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2 (docker-compose only)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail
            APP_DIR="/home/ec2-user/dnd-13th-3-backend"
            cd "$APP_DIR"

            if ! command -v docker-compose >/dev/null 2>&1; then
              if [ -x /usr/libexec/docker/cli-plugins/docker-compose ]; then
                sudo ln -sf /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose
              fi
            fi
            docker-compose version

            docker logout || true
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            ESCAPED_JWT=$(printf '%s' "${{ secrets.JWT_SECRET_KEY }}" | sed 's/\$/$$/g')

            {
              echo "DB_URL=jdbc:mysql://db:3306/minu?useSSL=false&serverTimezone=Asia/Seoul&allowPublicKeyRetrieval=true"
              echo "DB_USERNAME=${{ secrets.DB_USERNAME }}"
              echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
              echo "DB_NAME=minu"
              echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}"
              echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}"
              echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}"
              echo "JWT_SECRET_KEY=$ESCAPED_JWT"
            } > .env

            docker-compose down || true
            docker rm -f spring-app mysql-db 2>/dev/null || true

            docker-compose pull
            docker-compose up -d --force-recreate --remove-orphans

            docker image prune -f
  
  

